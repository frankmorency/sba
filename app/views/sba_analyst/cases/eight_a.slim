.full-grey#eight_a
  br
  .masthead
    .usa-grid-full.masthead__content.sba-u-flex-direction--column
      .usa-width-one-fourth.masthead__content__primary.sba-u-border--0
        h1.masthead__primary-heading All cases
        = render partial: 'shared/mpp/supervisors_cases_links' if current_user.can?(:ensure_mpp_user)
    .usa-grid-full.certify-local-nav
      ul.usa-nav-primary.usa-accordion
        li
          = link_to "8(a)", eight_a_sba_analyst_cases_path, class: "usa-nav-link current"
        li
          = link_to "ASMPP", mpp_sba_analyst_cases_path, class: "usa-nav-link"
        li
          = link_to "WOSB", wosb_sba_analyst_cases_path, class: "usa-nav-link"
        / li
          = link_to "VS", voluntary_suspension_sba_analyst_cases_path, class: "usa-nav-link"


.sba-l-container
  .sba-l-row
    .sba-l-col--12.sba-u-padding-x--2
      .certify-page-header
        .certify-page-header__primary
          h1
            | 8(a) cases
  .sba-l-row
  = form_for :eight_a, url: all_cases_search_sba_analyst_cases_path, html: { id: "case-search", remote: true }  do |f|
    .sba-l-col--12.sba-u-padding-x--2
      .sba-l-row
        .sba-u-measure--wide[role="search" action="search"]
          div.usa-search.usa-search-big.sba-c-search--large
            label.usa-sr-only[for="search-field-big"]
              | Search big
            = f.text_field :search, { id: "search-field-big", type: "search", placeholder: "Search firm name, firm owner, DUNS, NAICS"}
            button[type="button" onclick="sendAllSearchRequestSearchField(this)" style="font-size: 2rem; height: 4.4rem; width: 11.6rem; margin-top: 0;"]
              span.usa-search-submit-text
                | Search
      .sba-l-row.sba-u-margin-x--neg2
        .sba-l-sm-col--12.sba-l-md-col--golden-sm.sba-l-lg-col--4.sba-u-padding-x--2
          div
            h2.sba-u-font-size--h3
              | Filter Cases
            fieldset.sba-c-facet-set.sba-c-fieldset.sba-c-fieldset--inputs
              ul.sba-c-unstyled-list
                li
                  label.sba-c-label[for="eight_a[sba_office]"]
                    | SBA Offices
                  = f.select :sba_office, DutyStation.all_names.unshift("All offices").map{|name| [name, name]}, {}, {onchange: "selectACSSendRequestSBAOffice(this)"}
            fieldset.sba-c-facet-set.sba-c-fieldset.sba-c-fieldset--inputs
              legend.sba-c-facet-set__legend
                | Review type
              ul.usa-accordion
                = render "annual_review_form", locals: {f: f}
              ul.usa-accordion
                 li.sba-u-bgcolor--transparent
                   .usa-accordion-button.sba-u-padding--0.sba-u-padding-y--1.sba-u-bgcolor--transparent aria-controls="a2" aria-expanded="false" type="button" Initial Application
                   #a2.usa-accordion-content.sba-u-padding--0 aria-hidden="true"
                    fieldset.sba-c-facet-set.sba-c-fieldset.sba-c-fieldset--inputs
                      legend.sba-c-facet-set__legend.sba-c-facet-set__legend--l2
                        | Status
                      ul.sba-c-unstyled-list.check-pill
                        li
                          = f.check_box :ia_appeal_intent, {}, "ia_appeal_intent"
                          = f.label :ia_appeal_intent, "Intent to Appeal", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_screening, {}, "ia_screening"
                          = f.label :ia_screening, "Screening", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_returned_with_15_day_letter, {}, "ia_returned_with_15_day_letter"
                          = f.label :ia_returned_with_15_day_letter, "Returned with 15 Day Letter", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_closed, {}, "ia_closed"
                          = f.label :ia_closed, "Closed", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_processing, {}, "ia_processing"
                          = f.label :ia_processing, "Processing", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_sba_declined, {}, "ia_sba_declined"
                          = f.label :ia_sba_declined, "SBA Declined", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_pending_reconsideration, {}, "ia_pending_reconsideration"
                          = f.label :ia_pending_reconsideration, "Ineligible", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_pending_reconsideration_or_appeal, {}, "ia_pending_reconsideration_or_appeal"
                          = f.label :ia_pending_reconsideration_or_appeal, "Pending Appeal", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_reconsideration, {}, "ia_reconsideration"
                          = f.label :ia_reconsideration, "Reconsideration", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_appeal, {}, "ia_appeal"
                          = f.label :ia_appeal, "Appeal", {class: 'sba-c-label'}
                        li
                          = f.check_box :ia_sba_approved, {}, "ia_sba_approved"
                          = f.label :ia_sba_approved, "SBA Approved", {class: 'sba-c-label'}
            fieldset.sba-c-facet-set.sba-c-fieldset.sba-c-fieldset--inputs
              legend.sba-c-facet-set__legend
                | Certificate status
              ul.sba-c-unstyled-list.check-pill
                li
                  = f.check_box :cs_pending, {}, "cs_pending"
                  = f.label :cs_pending, "Pending", {class: 'sba-c-label'}
                li
                  = f.check_box :cs_ineligible, {}, "cs_ineligible"
                  = f.label :cs_ineligible, "Ineligible", {class: 'sba-c-label'}
                li
                  = f.check_box :cs_active, {}, "cs_active"
                  = f.label :cs_active, "Active", {class: 'sba-c-label'}
                li
                  = f.check_box :cs_graduated, {}, "cs_graduated"
                  = f.label :cs_graduated, "Graduated", {class: 'sba-c-label'}
                li
                  = f.check_box :cs_early_graduated, {}, "cs_early_graduated"
                  = f.label :cs_early_graduated, "Early Graduated", {class: 'sba-c-label'}
                li
                  = f.check_box :cs_terminated, {}, "cs_terminated"
                  = f.label :cs_terminated, "Terminated", {class: 'sba-c-label'}
                li
                  = f.check_box :cs_withdrawn, {}, "cs_withdrawn"
                  = f.label :cs_withdrawn, "Withdrawn", {class: 'sba-c-label'}
                li
                  = f.check_box :cs_expired, {}, "cs_expired"
                  = f.label :cs_expired, "Expired", {class: 'sba-c-label'}
                li
                  = f.check_box :cs_bdmis_rejected, {}, "cs_bdmis_rejected"
                  = f.label :cs_bdmis_rejected, "BDMIS Rejected", {class: 'sba-c-label'}
            fieldset.sba-c-facet-set.sba-c-fieldset.sba-c-fieldset--inputs
              legend.sba-c-facet-set__legend Dates
              h6 Program start date
              h6#start_date_error.error.hidden[style='margin: 0'] start date is invalid
              .sba-u-display--flex.sba-u-justify-content--between
                .sba-u-padding-right--1

                  label.sba-c-label for="eight_a_start_date"  From
                  = f.text_field :start_date, {class: 'js-calendar-picker js-format-as-date sba-c-input', pattern: '(0[1-9]|1[012]).(0[1-9]|1[0-9]|2[0-9]|3[01]).[0-9]{4}', 'aria-describedby': 'date_input_hint'}
                .sba-u-padding-left--1
                  label.sba-c-label for="eight_a_end_date"  To
                  = f.text_field :end_date, {class: 'js-calendar-picker js-format-as-date sba-c-input', pattern: '(0[1-9]|1[012]).(0[1-9]|1[0-9]|2[0-9]|3[01]).[0-9]{4}', 'aria-describedby': 'date_input_hint'}
              button.sba-c-button.sba-c-button--inverse.sba-c-button--small type="button" onclick="submitStartDateRange(this, 'eight_a')"  Apply dates

            fieldset.sba-c-facet-set.sba-c-fieldset.sba-c-fieldset--inputs
              legend.sba-c-facet-set__legend
                | Case ownership
              ul.sba-c-unstyled-list
                li
                  label.sba-c-label[for="eight_a_case_owner"]
                    | Case owner
                  = f.text_field :case_owner, placeholder: "Type name"
                li.sba-u-margin-top--3
                  label.sba-c-label[for="eight_a_service_bos"]
                    | Servicing BOS
                  = f.text_field :service_bos, placeholder: "Type name"
            button[type="button" onclick="sendAllSearchRequestSearchField(this)" ]
              span.usa-search-submit-text
                | Search
        .sba-l-sm-col--12.sba-l-md-col--golden-lg.sba-l-lg-col--8.sba-u-padding-x--2.sba-u-lg-padding-left--6
          .sba-u-display--flex.sba-u-justify-content--between
            h2.sba-u-font-size--h3
              span#case-numbers
                = get_pagination_number(@current_page, @cases.total, CasesV2Search::MAX_SEARCH_RESULTS)
            div
              label.sba-u-visibility--screen-reader[for="sort"]
                | Sort by
              = f.select :sort, @sort_options.map { |p| [ p[:name], p[:value] ] }, {},  { onchange: "selectACSSendRequestSort(this, 'eight_a_sort')" }
          .sba-u-display--flex.sba-u-justify-content--between
            .sba-c-facet-pills.sba-u-margin-bottom--3
              span#case-breadcrumb-pills
                - @breadcrumb_pills.each do |pill|
                  - if pill[:label] == "Search"
                    .sba-c-facet-pill[id="pill-#{pill[:id]}"]
                      = "#{pill[:label]} - #{pill[:value]}"
                      button.sba-c-facet-pill__close-button[type="button" title="Close" onclick="removePillForSearch(this)"] X
                  - elsif pill[:label] == "SBA Office"
                    .sba-c-facet-pill[id="pill-#{pill[:id]}"]
                      = "#{pill[:label]} - #{pill[:value]}"
                      button.sba-c-facet-pill__close-button[type="button" title="Close" onclick="removePillForSelectOffice(this)"] X
                  - elsif pill[:label] == "Case Owner"
                    .sba-c-facet-pill[id="pill-#{pill[:id]}"]
                      = "#{pill[:label]} - #{pill[:value]}"
                      button.sba-c-facet-pill__close-button[type="button" title="Close" onclick="removePillForSelectCaseOwner(this, 'eight_a_case_owner')"] X
                  - elsif pill[:label] == "BOS"
                    .sba-c-facet-pill[id="pill-#{pill[:id]}"]
                      = "#{pill[:label]} - #{pill[:value]}"
                      button.sba-c-facet-pill__close-button[type="button" title="Close" onclick="removePillForBOS(this)"] X
                  - elsif pill[:label] == "Sort"
                    .sba-c-facet-pill[id="pill-#{pill[:id]}"]
                      = "#{pill[:label]} - #{pill[:value]}"
                      button.sba-c-facet-pill__close-button[type="button" title="Close" onclick="removePillForSelectSort(this)"] X
                  - elsif pill[:label] == "Date"
                    .sba-c-facet-pill[id="pill-start_date"]
                      = "#{pill[:label]} - #{pill[:value]}"
                      button.sba-c-facet-pill__close-button[type="button" title="Close" onclick="removeSubmitStartDateRange(this)"] X
                  - else
                    .sba-c-facet-pill[id="pill-#{pill[:id]}"]
                      = "#{pill[:label]} - #{pill[:value]}"
                      button.sba-c-facet-pill__close-button[type="button" title="Close" onclick="removePillBreadCrumb(this)"] X
              span#reset-filter[class="#{@breadcrumb_pills.empty?}"]
                - if @breadcrumb_pills.empty?
                  = link_to("Clear all", eight_a_sba_analyst_cases_path, {class: "sba-c-facet-pills__reset hidden", id: "clear_all"})
                - else
                  = link_to("Clear all", eight_a_sba_analyst_cases_path, {class: "sba-c-facet-pills__reset", id: "clear_all"})
            - if @cases.total > 0
              div[style="min-width: 18em;"]
                = link_to download_sba_analyst_cases_path(format: "csv"), "aria-title": "Export CSV", class: "sba-c-button sba-c-button--inverse"  do
                  svg.sba-c-icon.sba-c-icon--blue.sba-u-margin-right--1 data-tooltip-text="Export CSV" aria-hidden="true"
                    use xlink:href="#{find_asset_path('svg-sprite/sprite.svg')}#download"
                  | Download CSV of current page
          div#search-results
            = render "search_result", locals: {results: {}}

javascript:
  $('header.navigation').css('margin-bottom', '0');
  $('section.usa-grid-full').css('max-width', '100%');
  var ar_click = "#{@ar_click}";
  var ia_click = "#{@ia_click}";
  $(document).ready(function() {
    if(ar_click == "true") {
      setTimeout(function(){ $("div[aria-controls='a1']").click(); }, 1);
    }
    if(ia_click == "true") {
      setTimeout(function(){ $("div[aria-controls='a2']").click(); }, 1);
    }

  });
css:
  .sba-l-container {
    margin-left: 0 !important;
  }

  .certify-local-nav {margin-top: -8px;}
  .masthead__content {padding-top: 0.5rem !important; }
  .certify-local-nav {margin-top: -8px;}
  input::-webkit-input-placeholder { color: rgb(117, 117, 117);}
  label {margin-top: 0;}

  .usa-accordion-content {
    padding: 0;
  }
